@implements IDisposable

<style>
    .contact:hover {
        cursor: pointer;
        background-color: var(--mud-palette-dark-lighten);
    }

    .active {
        cursor: pointer;
        background-color: var(--mud-palette-dark-lighten);
    }

    .contact-list-constraints {
        max-height: calc(100vh - 190px);
        min-height: calc(100vh - 190px);
        margin-top: 80px;
    }
    .add-contact-conversation {
        position: absolute;
        bottom: 10px;
        right: 10px;
    }
</style>

<Search />
<MudGrid Justify="Justify.Center" Class="px-0 overflow-y-scroll overflow-x-hidden no-scrollbar contact-list-constraints">
    @if (ContactsServices.LoadingStatus == LoadingStatus.LoadingSucceed)
    {
        <MudItem xs="12" Class="pt-0 d-flex justify-center">
            @if (ContactsServices.FilteredContacts is not null && ContactsServices.FilteredContacts.Count() > 0)
            {
                <MudContainer Class="py-0 px-0">
                    <MudList Clickable="true" Color="Color.Primary">

                        @foreach (var contact in ContactsServices.FilteredContacts)
                        {
                            <MudListItem OnClick="() => ContactClicked(contact)">
                                <MudStack Row>
                                    <MudBadge Color="AppUtils.GetBadgeColor(ChatNotificationServices.GetUserConnectivity(contact.ContactUserId))" Overlap="true" Bordered="true">
                                        <CustomAvatar ImagePath="@contact.ContactAvatar" FirstName="@contact.FirstName" Size="Size.Large" />
                                    </MudBadge>
                                    <MudStack>
                                        <MudText Typo="Typo.subtitle1" Class="pl-4" Style="font-weight:bold">@contact.FirstName @contact.LastName</MudText>
                                        <MudText Typo="Typo.subtitle2" Class="pl-4">@GetLastMessage(contact)</MudText>
                                    </MudStack>
                                    <MudSpacer />
                                    @if (contact.LastSentMessageDateTime == DateTime.MinValue)
                                    {
                                        <MudChip Text="blue" Color="Color.Info">New</MudChip>
                                    }
                                    else
                                    {
                                        <MudStack>
                                            <MudText Typo="Typo.subtitle1">@contact.LastSentMessageDateTime.ToString("HH:mm")</MudText>
                                            @if (contact.UnreadedCounter > 0)
                                            {
                                                <MudBadge Content="@contact.UnreadedCounter.ToString()" Color="Color.Info" Overlap="true" Class="mx-6 my-4">
                                                </MudBadge>
                                            }
                                        </MudStack>
                                    }
                                </MudStack>

                            </MudListItem>
                        }
                    </MudList>

                </MudContainer>
            }
            else
            {
                <MudContainer Class="py-4 px-0 d-flex flex-column justify-center align-center">
                    <MudImage Src="_content/ChatAppShared/images/no-contact-found.png" Height="150" Width="150" />
                    <MudText Typo="Typo.body1"> You have no contact</MudText>
                </MudContainer>
            }

        </MudItem>
        <MudFab Color="Color.Primary" Class="add-contact-conversation" StartIcon="@Icons.Material.Filled.Add" OnClick="AddContactButtonCliked" />
    }
    else if (ContactsServices.LoadingStatus == LoadingStatus.LoadingInProgress)
    {
        <MudItem xs="12" Class="d-flex justify-center align-center">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        </MudItem>
    }
    else
    {
        <MudItem xs="12">
            <MudContainer Class="py-4 px-0">
            </MudContainer>
        </MudItem>
    }
</MudGrid>




@code {

    LoadingStatus _loadingStatus = LoadingStatus.LoadingInProgress;

    protected override async Task OnInitializedAsync()
    {
        ContactsServices.OnChange += StateHasChanged;
        DisplayServices.OnChange += StateHasChanged;
        CurrentContactServices.OnChange += StateHasChanged;
        ChatNotificationServices.OnChange += StateHasChanged;

        await RetriveConversationsContacts();
    }

    private async Task AddContactButtonCliked()
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = true,
                FullWidth = true,
                NoHeader = true
            };
        var result = await DialogService.Show<UsersListDialog>("Choose new contact", options).Result;
        if (!result.Canceled)
        {
            try
            {
                var recieverId = (string)result.Data;
                var response = await httpClient.PostAsJsonAsync<string>(AppConfig.ADD_CONVERSATION_PATH, recieverId);
                switch (response.StatusCode)
                {
                    case HttpStatusCode.OK:
                        await RetriveConversationsContacts();
                        await ChatNotificationServices.NotifyUserById(recieverId);
                        Snackbar.Add("Adding new conversation is completed successfuly.", Severity.Success);
                        break;
                    case HttpStatusCode.NotFound:

                        Snackbar.Add((await response.Content.ReadAsStringAsync()), Severity.Error);
                        break;
                    case HttpStatusCode.Unauthorized:

                        Snackbar.Add((await response.Content.ReadAsStringAsync()), Severity.Error);
                        break;
                    case HttpStatusCode.BadRequest:

                        Snackbar.Add((await response.Content.ReadAsStringAsync()), Severity.Error);
                        break;
                    default:
                        Snackbar.Add("An Error Occured while trying to create new conversation.", Severity.Error);
                        break;
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
                Snackbar.Add("An Error Occured while trying to create new conversation.", Severity.Error);
            }


        }
    }

    private async Task RetriveConversationsContacts()
    {
        await ContactsServices.Get();
    }

    private async Task ContactClicked(ConversationContactDTO contact)
    {
        CurrentContactServices.Notify(contact);
        await ChatNotificationServices.Get(contact.ConversationId ?? "");
        await JsRuntime.InvokeAsync<string>("scrollToBottom", "scrollableDiv");

        if (DisplayServices.DisplayState != DisplayState.BothState)
        {
            DisplayServices.Notify(DisplayState.ChatState);
        }
    }




    private string GetLastMessage(ConversationContactDTO contact)
    {
        Func<string, string> formatedMessage = (string message) => message.Length > 15 ? message.Substring(0, 13) + "..." : message;
        if (contact.LastSentMessage.Contains(AppConfig.MESSAGE_SEPARATOR))
        {
            return formatedMessage(contact.LastSentMessage.Split(AppConfig.MESSAGE_SEPARATOR).First());
        }
        return formatedMessage(contact.LastSentMessage);
    }
    public void Dispose()
    {
        ContactsServices.OnChange -= StateHasChanged;
        CurrentContactServices.OnChange -= StateHasChanged;
        DisplayServices.OnChange -= StateHasChanged;
        ChatNotificationServices.OnChange -= StateHasChanged;

    }
}
